// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"context"
	"sync"

	computev1 "cloud.google.com/go/compute/apiv1"
	"github.com/googleapis/gax-go/v2"
	computepb "google.golang.org/genproto/googleapis/cloud/compute/v1"
)

// Ensure, that disksClientMock does implement disksClient.
// If this is not the case, regenerate this file with moq.
var _ disksClient = &disksClientMock{}

// disksClientMock is a mock implementation of disksClient.
//
// 	func TestSomethingThatUsesdisksClient(t *testing.T) {
//
// 		// make and configure a mocked disksClient
// 		mockeddisksClient := &disksClientMock{
// 			CreateSnapshotFunc: func(contextMoqParam context.Context, createSnapshotDiskRequest *computepb.CreateSnapshotDiskRequest, callOptions ...gax.CallOption) (*computev1.Operation, error) {
// 				panic("mock out the CreateSnapshot method")
// 			},
// 			DeleteFunc: func(contextMoqParam context.Context, deleteDiskRequest *computepb.DeleteDiskRequest, callOptions ...gax.CallOption) (*computev1.Operation, error) {
// 				panic("mock out the Delete method")
// 			},
// 			ListFunc: func(contextMoqParam context.Context, listDisksRequest *computepb.ListDisksRequest, callOptions ...gax.CallOption) *computev1.DiskIterator {
// 				panic("mock out the List method")
// 			},
// 			SetLabelsFunc: func(contextMoqParam context.Context, setLabelsDiskRequest *computepb.SetLabelsDiskRequest, callOptions ...gax.CallOption) (*computev1.Operation, error) {
// 				panic("mock out the SetLabels method")
// 			},
// 		}
//
// 		// use mockeddisksClient in code that requires disksClient
// 		// and then make assertions.
//
// 	}
type disksClientMock struct {
	// CreateSnapshotFunc mocks the CreateSnapshot method.
	CreateSnapshotFunc func(contextMoqParam context.Context, createSnapshotDiskRequest *computepb.CreateSnapshotDiskRequest, callOptions ...gax.CallOption) (*computev1.Operation, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(contextMoqParam context.Context, deleteDiskRequest *computepb.DeleteDiskRequest, callOptions ...gax.CallOption) (*computev1.Operation, error)

	// ListFunc mocks the List method.
	ListFunc func(contextMoqParam context.Context, listDisksRequest *computepb.ListDisksRequest, callOptions ...gax.CallOption) *computev1.DiskIterator

	// SetLabelsFunc mocks the SetLabels method.
	SetLabelsFunc func(contextMoqParam context.Context, setLabelsDiskRequest *computepb.SetLabelsDiskRequest, callOptions ...gax.CallOption) (*computev1.Operation, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateSnapshot holds details about calls to the CreateSnapshot method.
		CreateSnapshot []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateSnapshotDiskRequest is the createSnapshotDiskRequest argument value.
			CreateSnapshotDiskRequest *computepb.CreateSnapshotDiskRequest
			// CallOptions is the callOptions argument value.
			CallOptions []gax.CallOption
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDiskRequest is the deleteDiskRequest argument value.
			DeleteDiskRequest *computepb.DeleteDiskRequest
			// CallOptions is the callOptions argument value.
			CallOptions []gax.CallOption
		}
		// List holds details about calls to the List method.
		List []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListDisksRequest is the listDisksRequest argument value.
			ListDisksRequest *computepb.ListDisksRequest
			// CallOptions is the callOptions argument value.
			CallOptions []gax.CallOption
		}
		// SetLabels holds details about calls to the SetLabels method.
		SetLabels []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SetLabelsDiskRequest is the setLabelsDiskRequest argument value.
			SetLabelsDiskRequest *computepb.SetLabelsDiskRequest
			// CallOptions is the callOptions argument value.
			CallOptions []gax.CallOption
		}
	}
	lockCreateSnapshot sync.RWMutex
	lockDelete         sync.RWMutex
	lockList           sync.RWMutex
	lockSetLabels      sync.RWMutex
}

// CreateSnapshot calls CreateSnapshotFunc.
func (mock *disksClientMock) CreateSnapshot(contextMoqParam context.Context, createSnapshotDiskRequest *computepb.CreateSnapshotDiskRequest, callOptions ...gax.CallOption) (*computev1.Operation, error) {
	if mock.CreateSnapshotFunc == nil {
		panic("disksClientMock.CreateSnapshotFunc: method is nil but disksClient.CreateSnapshot was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		CreateSnapshotDiskRequest *computepb.CreateSnapshotDiskRequest
		CallOptions               []gax.CallOption
	}{
		ContextMoqParam:           contextMoqParam,
		CreateSnapshotDiskRequest: createSnapshotDiskRequest,
		CallOptions:               callOptions,
	}
	mock.lockCreateSnapshot.Lock()
	mock.calls.CreateSnapshot = append(mock.calls.CreateSnapshot, callInfo)
	mock.lockCreateSnapshot.Unlock()
	return mock.CreateSnapshotFunc(contextMoqParam, createSnapshotDiskRequest, callOptions...)
}

// CreateSnapshotCalls gets all the calls that were made to CreateSnapshot.
// Check the length with:
//     len(mockeddisksClient.CreateSnapshotCalls())
func (mock *disksClientMock) CreateSnapshotCalls() []struct {
	ContextMoqParam           context.Context
	CreateSnapshotDiskRequest *computepb.CreateSnapshotDiskRequest
	CallOptions               []gax.CallOption
} {
	var calls []struct {
		ContextMoqParam           context.Context
		CreateSnapshotDiskRequest *computepb.CreateSnapshotDiskRequest
		CallOptions               []gax.CallOption
	}
	mock.lockCreateSnapshot.RLock()
	calls = mock.calls.CreateSnapshot
	mock.lockCreateSnapshot.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *disksClientMock) Delete(contextMoqParam context.Context, deleteDiskRequest *computepb.DeleteDiskRequest, callOptions ...gax.CallOption) (*computev1.Operation, error) {
	if mock.DeleteFunc == nil {
		panic("disksClientMock.DeleteFunc: method is nil but disksClient.Delete was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		DeleteDiskRequest *computepb.DeleteDiskRequest
		CallOptions       []gax.CallOption
	}{
		ContextMoqParam:   contextMoqParam,
		DeleteDiskRequest: deleteDiskRequest,
		CallOptions:       callOptions,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(contextMoqParam, deleteDiskRequest, callOptions...)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockeddisksClient.DeleteCalls())
func (mock *disksClientMock) DeleteCalls() []struct {
	ContextMoqParam   context.Context
	DeleteDiskRequest *computepb.DeleteDiskRequest
	CallOptions       []gax.CallOption
} {
	var calls []struct {
		ContextMoqParam   context.Context
		DeleteDiskRequest *computepb.DeleteDiskRequest
		CallOptions       []gax.CallOption
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *disksClientMock) List(contextMoqParam context.Context, listDisksRequest *computepb.ListDisksRequest, callOptions ...gax.CallOption) *computev1.DiskIterator {
	if mock.ListFunc == nil {
		panic("disksClientMock.ListFunc: method is nil but disksClient.List was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		ListDisksRequest *computepb.ListDisksRequest
		CallOptions      []gax.CallOption
	}{
		ContextMoqParam:  contextMoqParam,
		ListDisksRequest: listDisksRequest,
		CallOptions:      callOptions,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(contextMoqParam, listDisksRequest, callOptions...)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockeddisksClient.ListCalls())
func (mock *disksClientMock) ListCalls() []struct {
	ContextMoqParam  context.Context
	ListDisksRequest *computepb.ListDisksRequest
	CallOptions      []gax.CallOption
} {
	var calls []struct {
		ContextMoqParam  context.Context
		ListDisksRequest *computepb.ListDisksRequest
		CallOptions      []gax.CallOption
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// SetLabels calls SetLabelsFunc.
func (mock *disksClientMock) SetLabels(contextMoqParam context.Context, setLabelsDiskRequest *computepb.SetLabelsDiskRequest, callOptions ...gax.CallOption) (*computev1.Operation, error) {
	if mock.SetLabelsFunc == nil {
		panic("disksClientMock.SetLabelsFunc: method is nil but disksClient.SetLabels was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		SetLabelsDiskRequest *computepb.SetLabelsDiskRequest
		CallOptions          []gax.CallOption
	}{
		ContextMoqParam:      contextMoqParam,
		SetLabelsDiskRequest: setLabelsDiskRequest,
		CallOptions:          callOptions,
	}
	mock.lockSetLabels.Lock()
	mock.calls.SetLabels = append(mock.calls.SetLabels, callInfo)
	mock.lockSetLabels.Unlock()
	return mock.SetLabelsFunc(contextMoqParam, setLabelsDiskRequest, callOptions...)
}

// SetLabelsCalls gets all the calls that were made to SetLabels.
// Check the length with:
//     len(mockeddisksClient.SetLabelsCalls())
func (mock *disksClientMock) SetLabelsCalls() []struct {
	ContextMoqParam      context.Context
	SetLabelsDiskRequest *computepb.SetLabelsDiskRequest
	CallOptions          []gax.CallOption
} {
	var calls []struct {
		ContextMoqParam      context.Context
		SetLabelsDiskRequest *computepb.SetLabelsDiskRequest
		CallOptions          []gax.CallOption
	}
	mock.lockSetLabels.RLock()
	calls = mock.calls.SetLabels
	mock.lockSetLabels.RUnlock()
	return calls
}
